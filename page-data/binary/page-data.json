{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/binary","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Binary Tree Overview\",\n  \"emoji\": \"\",\n  \"tags\": [\"Binary Trees\", \"Data Structures\"],\n  \"link\": \"\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"leetcode-questions\"\n  }, \"Leetcode Questions\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/problems/sum-of-two-integers/\"\n  }), \"Sum of Two Integers\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/problems/number-of-1-bits/\"\n  }), \"Number of 1 Bits\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/problems/counting-bits/\"\n  }), \"Counting Bits\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/problems/missing-number/\"\n  }), \"Missing Number\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/problems/reverse-bits/\"\n  }), \"Reverse Bits\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Binary Tree Overview","tags":["Binary Trees","Data Structures"],"emoji":"","link":""},"fields":{"dateModified":"14th Jun 2020"},"parent":{"__typename":"File","name":"binary","fileName":"binary.md"}}},"pageContext":{"id":"afc692b5-ca9a-5ea0-bca9-f485cc2daa56","previous":null,"next":{"id":"16cf4cf9-9713-5d27-940f-de5dc9163c66","frontmatter":{"title":"Array Overview","tags":["Arrays","Data Structures"]},"parent":{"name":"arrays","base":"arrays.md"}},"hasUntagged":false,"basePath":"/"}}}