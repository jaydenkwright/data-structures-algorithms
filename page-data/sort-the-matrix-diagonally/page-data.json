{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/sort-the-matrix-diagonally","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Sort the Matrix Diagonally\",\n  \"emoji\": \"\",\n  \"tags\": [\"Arrays\", \"Sorting\", \"Solutions\"],\n  \"link\": \"https://leetcode.com/problems/sort-the-matrix-diagonally/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Given a m * n matrix mat of integers, sort it diagonally in ascending order from the top-left to the bottom-right then return the sorted array.\"), mdx(\"h3\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://assets.leetcode.com/uploads/2020/01/21/1482_example_1_2.png\",\n    \"alt\": \"Example\"\n  }))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]\\nOutput: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]\\n\")), mdx(\"h3\", {\n    \"id\": \"solution\"\n  }, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var diagonalSort = function(mat) {\\n  let map = {}\\n  let row = mat.length\\n  let col = mat[0].length\\n  for (let i = 0; i < row; i++){\\n    for(let j = 0; j < col; j++){\\n      let difference = i - j\\n      if(difference in map){\\n        map[difference].push(mat[i][j])\\n      }else{\\n        map[difference] = [mat[i][j]]\\n      }\\n    }\\n  }\\n\\n  for(let key in map){\\n    map[key].sort((a,b) => a-b)\\n  }\\n\\n  for(let i = 0; i < row;i++){\\n    for(let j = 0; j < col; j++){\\n      let difference = i-j\\n      mat[i][j] = map[difference][0]\\n      map[difference].shift()\\n    }\\n  }\\n  return mat\\n};\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Sort the Matrix Diagonally","tags":["Arrays","Sorting","Solutions"],"emoji":"","link":"https://leetcode.com/problems/sort-the-matrix-diagonally/"},"fields":{"dateModified":"21st Jun 2020"},"parent":{"__typename":"File","name":"sort-the-matrix-diagonally","fileName":"sort-the-matrix-diagonally.md"}}},"pageContext":{"id":"3b1843d7-4011-5994-8ff3-fc73d23b4b46","previous":null,"next":{"id":"9da0c84b-f913-500c-83d2-321e4b2881ef","frontmatter":{"title":"Queries on a Permutation With Key","tags":["Arrays","Solutions"]},"parent":{"name":"queries-on-a-permutation-with-key","base":"queries-on-a-permutation-with-key.md"}},"hasUntagged":false,"basePath":"/"}}}