{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/queries-on-a-permutation-with-key","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Queries on a Permutation With Key\",\n  \"emoji\": \"\",\n  \"tags\": [\"Arrays\", \"Solutions\"],\n  \"link\": \"https://leetcode.com/problems/queries-on-a-permutation-with-key/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Given the array queries of positive integers between 1 and m, you have to process all queries\", \"[i]\", \" (from i=0 to i=queries.length-1) according to the following rules:\"), mdx(\"p\", null, \"In the beginning, you have the permutation P=\", \"[1,2,3,...,m]\", \".\\nFor the current i, find the position of queries\", \"[i]\", \" in the permutation P (indexing from 0) and then move this at the beginning of the permutation P. Notice that the position of queries\", \"[i]\", \" in P is the result for queries\", \"[i]\", \".\\nReturn an array containing the result for the given queries.\"), mdx(\"h3\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Input: queries = [3,1,2,1], m = 5\\nOutput: [2,1,2,1] \\nExplanation: The queries are processed as follow: \\nFor i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is 2, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5]. \\nFor i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5]. \\nFor i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is 2, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5]. \\nFor i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5]. \\nTherefore, the array containing the result is [2,1,2,1]. \\n\")), mdx(\"h3\", {\n    \"id\": \"solution\"\n  }, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const processQueries = (queries, m) => {\\n    let result = []\\n    let p = []\\n    for (let i = 1; i < m + 1; i++) p.push(i)\\n    \\n    for (let i = 0; i < queries.length; i++){\\n        let index = p.indexOf(queries[i])\\n        p.splice(index, 1);\\n        p.unshift(queries[i])\\n        result.push(index)\\n    }\\n    return result\\n};\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Queries on a Permutation With Key","tags":["Arrays","Solutions"],"emoji":"","link":"https://leetcode.com/problems/queries-on-a-permutation-with-key/"},"fields":{"dateModified":"21st Jun 2020"},"parent":{"__typename":"File","name":"queries-on-a-permutation-with-key","fileName":"queries-on-a-permutation-with-key.md"}}},"pageContext":{"id":"9da0c84b-f913-500c-83d2-321e4b2881ef","previous":{"id":"3b1843d7-4011-5994-8ff3-fc73d23b4b46","frontmatter":{"title":"Sort the Matrix Diagonally","tags":["Arrays","Sorting","Solutions"]},"parent":{"name":"sort-the-matrix-diagonally","base":"sort-the-matrix-diagonally.md"}},"next":{"id":"0f6ed9f5-e70d-5f00-858c-686e65d64ecc","frontmatter":{"title":"count-number-of-teams","tags":["Arrays","Solutions"]},"parent":{"name":"count-number-of-teams","base":"count-number-of-teams.md"}},"hasUntagged":false,"basePath":"/"}}}