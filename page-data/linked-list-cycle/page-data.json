{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/linked-list-cycle","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Linked List Cycle\",\n  \"emoji\": \"\",\n  \"tags\": [\"Linked List\", \"Solutions\"],\n  \"link\": \"https://leetcode.com/problems/linked-list-cycle/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Given a linked list, determine if it has a cycle in it.\"), mdx(\"p\", null, \"To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.\"), mdx(\"h3\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png\",\n    \"alt\": \"Example\"\n  }))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Input: head = [3,2,0,-4], pos = 1\\nOutput: true\\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\\n\")), mdx(\"h3\", {\n    \"id\": \"solution\"\n  }, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"class Solution:\\n    def hasCycle(self, head: ListNode) -> bool:\\n        if head == None: return False\\n        slow = fast = head\\n        \\n        while fast and fast.next:\\n            fast = fast.next.next\\n            slow = slow.next\\n            if slow == fast: return True\\n        return False\\n        \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Linked List Cycle","tags":["Linked List","Solutions"],"emoji":"","link":"https://leetcode.com/problems/linked-list-cycle/"},"fields":{"dateModified":"25th Jun 2020"},"parent":{"__typename":"File","name":"linked-list-cycle","fileName":"linked-list-cycle.md"}}},"pageContext":{"id":"7e75fcf9-69e2-543b-85e3-ee292a6ba1bb","previous":null,"next":{"id":"e136e933-ff9c-5727-9c87-6e60a04a463c","frontmatter":{"title":"Remove Linked List Elements","tags":["Linked List","Solutions"]},"parent":{"name":"remove-linked-list-elements","base":"remove-linked-list-elements.md"}},"hasUntagged":false,"basePath":"/"}}}