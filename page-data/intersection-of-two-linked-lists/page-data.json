{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/intersection-of-two-linked-lists","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Intersection of Two Linked Lists\",\n  \"emoji\": \"\",\n  \"tags\": [\"Linked List\", \"Solutions\"],\n  \"link\": \"https://leetcode.com/problems/intersection-of-two-linked-lists/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Write a program to find the node at which the intersection of two singly linked lists begins.\"), mdx(\"p\", null, \"For example, the following two linked lists:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://assets.leetcode.com/uploads/2018/12/13/160_statement.png\",\n    \"alt\": \"Example\"\n  }))), mdx(\"p\", null, \"begin to intersect at node c1.\"), mdx(\"h3\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png\",\n    \"alt\": \"Example\"\n  }))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\\nOutput: Reference of the node with value = 8\\nInput Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\\n\")), mdx(\"h3\", {\n    \"id\": \"solution\"\n  }, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:\\n        if headA == None or headB == None: return None\\n        currentA = headA\\n        currentB = headB\\n        while currentA != currentB:\\n            if currentA == None:\\n                currentA = headB\\n            else:\\n                currentA = currentA.next\\n            if currentB == None:\\n                currentB = headA\\n            else:\\n                currentB = currentB.next\\n        \\n        return currentA\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Intersection of Two Linked Lists","tags":["Linked List","Solutions"],"emoji":"","link":"https://leetcode.com/problems/intersection-of-two-linked-lists/"},"fields":{"dateModified":"25th Jun 2020"},"parent":{"__typename":"File","name":"intersection-of-two-linked-lists","fileName":"intersection-of-two-linked-lists.md"}}},"pageContext":{"id":"e00bed78-0947-5e91-8a3d-44e6aa20341c","previous":{"id":"3b1843d7-4011-5994-8ff3-fc73d23b4b46","frontmatter":{"title":"Sort the Matrix Diagonally","tags":["Arrays","Sorting","Solutions"]},"parent":{"name":"sort-the-matrix-diagonally","base":"sort-the-matrix-diagonally.md"}},"next":{"id":"9da0c84b-f913-500c-83d2-321e4b2881ef","frontmatter":{"title":"Queries on a Permutation With Key","tags":["Arrays","Solutions"]},"parent":{"name":"queries-on-a-permutation-with-key","base":"queries-on-a-permutation-with-key.md"}},"hasUntagged":false,"basePath":"/"}}}