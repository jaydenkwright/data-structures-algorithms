{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/next-greater-element-i","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Remove All Adjacent Duplicates In String\",\n  \"emoji\": \"\",\n  \"tags\": [\"Stacks\", \"Solutions\"],\n  \"link\": \"https://leetcode.com/problems/next-greater-element-i/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You are given two arrays (without duplicates) nums1 and nums2 where nums1\\u2019s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2.\"), mdx(\"p\", null, \"The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.\"), mdx(\"h3\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Input: nums1 = [4,1,2], nums2 = [1,3,4,2].\\nOutput: [-1,3,-1]\\nExplanation:\\n    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.\\n    For number 1 in the first array, the next greater number for it in the second array is 3.\\n    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.\\n\")), mdx(\"h3\", {\n    \"id\": \"solution\"\n  }, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"class Solution:\\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\\n        if nums1 == None or nums2 == None: return \\n        nextGreatest = {}\\n        stack = []\\n        \\n        for num in nums2:\\n            while stack and stack[-1] < num:\\n                nextGreatest[stack.pop()] = num\\n            stack.append(num)\\n        \\n        for i in range(len(nums1)):\\n            if nums1[i] in nextGreatest:\\n                nums1[i] = nextGreatest[nums1[i]]\\n            else:\\n                nums1[i] = -1\\n        return nums1\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Remove All Adjacent Duplicates In String","tags":["Stacks","Solutions"],"emoji":"","link":"https://leetcode.com/problems/next-greater-element-i/"},"fields":{"dateModified":"3rd Jul 2020"},"parent":{"__typename":"File","name":"next-greater-element-i","fileName":"next-greater-element-i.md"}}},"pageContext":{"id":"b3c1a09f-43ca-56b0-a314-e081a1a5f6ee","previous":null,"next":{"id":"30db839c-34c8-5dec-826c-a772af4e58a8","frontmatter":{"title":"Remove All Adjacent Duplicates In String","tags":["Stacks","Solutions"]},"parent":{"name":"remove-all-adjacent-duplicates-in-string","base":"remove-all-adjacent-duplicates-in-string.md"}},"hasUntagged":false,"basePath":"/"}}}