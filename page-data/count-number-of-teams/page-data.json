{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/count-number-of-teams","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"count-number-of-teams\",\n  \"emoji\": \"\",\n  \"tags\": [\"Arrays\", \"Solutions\"],\n  \"link\": \"https://leetcode.com/problems/count-number-of-teams/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"There are n soldiers standing in a line. Each soldier is assigned a unique rating value.\"), mdx(\"p\", null, \"You have to form a team of 3 soldiers amongst them under the following rules:\"), mdx(\"p\", null, \"Choose 3 soldiers with index (i, j, k) with rating (rating\", \"[i]\", \", rating\", \"[j]\", \", rating\", \"[k]\", \").\\nA team is valid if:  (rating\", \"[i]\", \" < rating\", \"[j]\", \" < rating\", \"[k]\", \") or (rating\", \"[i]\", \" > rating\", \"[j]\", \" > rating\", \"[k]\", \") where (0 <= i < j < k < n).\\nReturn the number of teams you can form given the conditions. (soldiers can be part of multiple teams).\"), mdx(\"h3\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Input: rating = [2,5,3,4,1]\\nOutput: 3\\nExplanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). \\n\")), mdx(\"h3\", {\n    \"id\": \"solution-brute-force\"\n  }, \"Solution (Brute Force)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var numTeams = function(rating) {\\n  let count = 0\\n  for(let i = 0; i < rating.length; i++){\\n    for (let j = i + 1; j <rating.length; j++){\\n      for (let k = j + 1; k <rating.length; k++){\\n        let ratingi = rating[i]\\n        let ratingj = rating[j]\\n        let ratingk = rating[k]\\n        if(ratingi < ratingj && ratingj < ratingk) count++\\n        if(ratingi > ratingj && ratingj > ratingk) count++\\n      }\\n    }\\n  }\\n  return count\\n};\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"count-number-of-teams","tags":["Arrays","Solutions"],"emoji":"","link":"https://leetcode.com/problems/count-number-of-teams/"},"fields":{"dateModified":"21st Jun 2020"},"parent":{"__typename":"File","name":"count-number-of-teams","fileName":"count-number-of-teams.md"}}},"pageContext":{"id":"0f6ed9f5-e70d-5f00-858c-686e65d64ecc","previous":{"id":"9da0c84b-f913-500c-83d2-321e4b2881ef","frontmatter":{"title":"Queries on a Permutation With Key","tags":["Arrays","Solutions"]},"parent":{"name":"queries-on-a-permutation-with-key","base":"queries-on-a-permutation-with-key.md"}},"next":{"id":"37fc87a8-6d9a-5f3b-92f8-c2776e0343a4","frontmatter":{"title":"Two Sum","tags":["Arrays","Hash Tables","Solutions"]},"parent":{"name":"two-sum","base":"two-sum.md"}},"hasUntagged":false,"basePath":"/"}}}