{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/baseball-game","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Baseball Game\",\n  \"emoji\": \"\",\n  \"tags\": [\"Stacks\", \"Solutions\"],\n  \"link\": \"https://leetcode.com/problems/baseball-game/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You're now a baseball game point recorder.\"), mdx(\"p\", null, \"Given a list of strings, each string can be one of the 4 following types:\"), mdx(\"p\", null, \"Integer (one round's score): Directly represents the number of points you get in this round.\\n\\\"+\\\" (one round's score): Represents that the points you get in this round are the sum of the last two valid round's points.\\n\\\"D\\\" (one round's score): Represents that the points you get in this round are the doubled data of the last valid round's points.\\n\\\"C\\\" (an operation, which isn't a round's score): Represents the last valid round's points you get were invalid and should be removed.\\nEach round's operation is permanent and could have an impact on the round before and the round after.\"), mdx(\"p\", null, \"You need to return the sum of the points you could get in all the rounds.\"), mdx(\"h3\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Input: [\\\"5\\\",\\\"2\\\",\\\"C\\\",\\\"D\\\",\\\"+\\\"]\\nOutput: 30\\nExplanation: \\nRound 1: You could get 5 points. The sum is: 5.\\nRound 2: You could get 2 points. The sum is: 7.\\nOperation 1: The round 2's data was invalid. The sum is: 5.  \\nRound 3: You could get 10 points (the round 2's data has been removed). The sum is: 15.\\nRound 4: You could get 5 + 10 = 15 points. The sum is: 30.\\n\")), mdx(\"h3\", {\n    \"id\": \"solution\"\n  }, \"Solution\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"class Solution:\\n    def calPoints(self, ops: List[str]) -> int:\\n      stack = []\\n\\n      for i in range(len(ops)):\\n        if stack and ops[i] == \\\"+\\\":\\n          stack.append(stack[-1] + stack[-2])\\n        elif stack and ops[i] == \\\"D\\\":\\n          stack.append(stack[-1] * 2)\\n        elif stack and ops[i] == \\\"C\\\":\\n          stack.pop()\\n        else:\\n          stack.append(int(ops[i]))\\n      return sum(stack)\\n                \\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Baseball Game","tags":["Stacks","Solutions"],"emoji":"","link":"https://leetcode.com/problems/baseball-game/"},"fields":{"dateModified":"2nd Jul 2020"},"parent":{"__typename":"File","name":"baseball-game","fileName":"baseball-game.md"}}},"pageContext":{"id":"7b959bdc-64de-5c1a-a3e9-78aef82030f2","previous":{"id":"9d578148-fc40-5a59-8323-ac6769fdc640","frontmatter":{"title":"Merge Two Sorted Lists","tags":["Linked List","Solutions"]},"parent":{"name":"merge-two-sorted-lists","base":"merge-two-sorted-lists.md"}},"next":{"id":"08945ba3-ef27-53e7-b1be-439589563034","frontmatter":{"title":"Delete Node in a Linked List","tags":["Linked List","Solutions"]},"parent":{"name":"delete-node-in-a-linked-list","base":"delete-node-in-a-linked-list.md"}},"hasUntagged":false,"basePath":"/"}}}