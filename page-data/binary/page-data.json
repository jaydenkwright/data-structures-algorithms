{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/binary","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Binary Tree Overview\",\n  \"emoji\": \"\",\n  \"tags\": [\"Binary Trees\", \"Data Structures\"],\n  \"link\": \"\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"implementation\"\n  }, \"Implementation\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"class Node{\\n  constructor(data){\\n    this.data = data\\n    this.left = null\\n    this.right = null\\n  }\\n}\\n\\nclass BinarySearchTree{\\n  constructor(){\\n    this.root = null\\n  }\\n\\n  add(data){\\n    const node = this.root\\n    if(!node){\\n      this.root = new Node(data)\\n      return this\\n    }else{\\n      const searchBinaryTree = (node) => {\\n        if(data < node.data){\\n          if(!node.left){\\n            node.left = new Node(data)\\n            return this\\n          }else if(node.left){\\n            return searchBinaryTree(node.left)\\n          }\\n        }else if(data > node.data){\\n          if(!node.right){\\n            node.right = new Node(data)\\n            return this\\n          }else if(node.right){\\n            return searchBinaryTree(node.right)\\n          }\\n        }else{\\n          return null\\n        }\\n      }\\n      return searchBinaryTree(node)\\n    }\\n  }\\n\\n  min(){\\n    let current = this.root\\n    while(current.left){\\n      current = current.left\\n    }\\n    return current\\n  }\\n\\n  max(){\\n    let current = this.root\\n    while(current.right){\\n      current = current.right\\n    }\\n    return current\\n  }\\n\\n  find(data){\\n    let current = this.root\\n    while(current.data !== data){\\n      if(data < current.data){\\n        current = current.left\\n      }else{\\n        current = current.right\\n      }\\n      if(!current) return null\\n    }\\n    return current\\n  }\\n\\n  doesExist(data){\\n    let current = this.root\\n    while(current){\\n      if(data === current.data){\\n        return true\\n      }\\n      if(data < current.data){\\n        current = current.left\\n      }else{\\n        current = current.right\\n      }\\n    }\\n    return false\\n  }\\n\\n  remove(data){\\n    const removeNode = (node, data) => {\\n      if(!node) return null\\n      if(data === node.data){\\n        if(!node.left && !node.right) return null\\n      \\n      if(!node.left) return node.right\\n      if(!node.right) return node.left\\n\\n      let temp = node.right\\n      while(temp){\\n        temp = temp.left\\n      }\\n      node.data = temp.data\\n      node.right = removeNode(node.right, temp.data)\\n      return node\\n      }else if (data < node.data){\\n        node.left = removeNode(node.left, data)\\n        return node\\n      }else{\\n        node.right = removeNode(node.right, data)\\n        return node\\n      }\\n    }\\n  }\\n}\\n\\nconst binarySearch = new BinarySearchTree()\\nbinarySearch.add(2)\\nbinarySearch.add(4)\\nbinarySearch.add(1)\\nbinarySearch.add(27)\\nbinarySearch.min() // Returns 1\\nbinarySearch.max() // Returns 27\\nbinarySearch.find(1)\\nbinarySearch.doesExist(1) // Returns true\\n\")), mdx(\"h2\", {\n    \"id\": \"leetcode-questions\"\n  }, \"Leetcode Questions\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/problems/sum-of-two-integers/\"\n  }), \"Sum of Two Integers\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/problems/number-of-1-bits/\"\n  }), \"Number of 1 Bits\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/problems/counting-bits/\"\n  }), \"Counting Bits\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/problems/missing-number/\"\n  }), \"Missing Number\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://leetcode.com/problems/reverse-bits/\"\n  }), \"Reverse Bits\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Binary Tree Overview","tags":["Binary Trees","Data Structures"],"emoji":"","link":""},"fields":{"dateModified":"19th Jun 2020"},"parent":{"__typename":"File","name":"binary","fileName":"binary.md"}}},"pageContext":{"id":"afc692b5-ca9a-5ea0-bca9-f485cc2daa56","previous":{"id":"18d01c02-dc71-54fa-ab70-b953b75c2d91","frontmatter":{"title":"Best Time to Buy and Sell Stock","tags":["Arrays","Dynamic Programming","Solutions"]},"parent":{"name":"stock-prices","base":"stock-prices.md"}},"next":{"id":"9da0c84b-f913-500c-83d2-321e4b2881ef","frontmatter":{"title":"1409. Queries on a Permutation With Key","tags":["Arrays","Solutions"]},"parent":{"name":"queries-on-a-permutation-with-key","base":"queries-on-a-permutation-with-key.md"}},"hasUntagged":false,"basePath":"/"}}}